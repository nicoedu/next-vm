import {
  Box,
  Button,
  Center,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Input,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  Progress,
  Select,
  useToast,
} from '@chakra-ui/react'
import axios from 'axios'
import { useFormik } from 'formik'
import Head from 'next/head'
import { useState } from 'react'
import * as Yup from 'yup'

const VmSchema = Yup.object().shape({
  os: Yup.string().required('Required'),
  ram: Yup.number()
    .positive()
    .integer()
    .min(511, 'Too Short!')
    .max(4097, 'Too Long!')
    .required('Required'),
  cpu: Yup.number()
    .positive()
    .integer()
    .min(1, 'Too Short!')
    .max(4, 'Too Long!')
    .required('Required'),
  ip: Yup.string().trim().required('Required'),
})

export default function Home() {
  const [isLoading, setIsLoading] = useState()
  const toast = useToast()

  const formik = useFormik({
    initialValues: {
      os: '',
      name: '',
      ip: '',
      ram: '512',
      cpu: '1',
    },
    validationSchema: VmSchema,
    onSubmit: (values) => {
      setIsLoading(true)
      axios
        .post('/api/create', formik.values)
        .then((response) => {
          console.log(response)
          toast({
            title: 'VM Created',
            status: 'success',
            duration: 9000,
            isClosable: true,
          })
          setIsLoading(false)
        })
        .catch((error) => {
          toast({
            title: 'VM Creation Failed',
            description: error.toString(),
            status: 'error',
            duration: 9000,
            isClosable: true,
          })
          console.log(error)
          setIsLoading(false)
        })
    },
  })
  return (
    <Flex backgroundColor="#1f1f1f" h="100vh" align="center" justify="center">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box w="600px" backgroundColor="#fff" p={24}>
        {isLoading ? <Progress size="md" isIndeterminate /> : null}

        <form onSubmit={formik.handleSubmit}>
          <Box py={3}>
            <FormControl
              id="os"
              isInvalid={formik.errors.os && formik.touched.os}
            >
              <FormLabel>Operating System</FormLabel>
              <Select
                placeholder="Select operating system"
                value={formik.values.os}
                onChange={formik.handleChange}
              >
                <option value="windows">Windows</option>
                <option value="linux">Linux</option>
              </Select>
              <FormErrorMessage color="red">
                {formik.errors.os}
              </FormErrorMessage>
            </FormControl>
            <FormControl isInvalid={formik.errors.name && formik.touched.name}>
              <FormLabel htmlFor="ip">Name</FormLabel>
              <Input
                value={formik.values.name}
                onChange={formik.handleChange}
                id="name"
                placeholder="name"
              />
              <FormErrorMessage color="red">
                {formik.errors.name}
              </FormErrorMessage>
            </FormControl>
            <FormControl isInvalid={formik.errors.ip && formik.touched.ip}>
              <FormLabel htmlFor="ip">Ip</FormLabel>
              <Input
                value={formik.values.ip}
                onChange={formik.handleChange}
                id="ip"
                placeholder="Ip"
              />
              <FormErrorMessage color="red">
                {formik.errors.ip}
              </FormErrorMessage>
            </FormControl>
            <FormControl id="cpu" isInvalid={formik.errors.cpu}>
              <FormLabel>NÂº CPUs</FormLabel>
              <NumberInput
                defaultValue={1}
                max={4}
                min={1}
                value={Number(formik.values.cpu)}
                onChange={(val) => formik.setFieldValue('cpu', val.toString())}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput>
            </FormControl>
            <FormControl id="ram" isInvalid={formik.errors.ram}>
              <FormLabel>Ram</FormLabel>
              <NumberInput
                defaultValue={512}
                max={4096}
                min={512}
                step={128}
                value={formik.values.ram}
                onChange={(val) => {
                  formik.setFieldValue('ram', val)
                }}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput>
            </FormControl>
          </Box>
          <Button type="submit" isDisabled={isLoading}>
            Submit
          </Button>
        </form>
      </Box>
    </Flex>
  )
}
